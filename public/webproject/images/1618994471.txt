--TASK 1 a)CREATE OR REPLACE PROCEDURE EMPLOYEE_REPORT(    direct IN VARCHAR2, fname IN VARCHAR2) IS    f UTL_FILE.FILE_TYPE;    CURSOR avg_cur IS        SELECT last_name, department_id, salary            FROM employees e            WHERE salary > (SELECT AVG(salary)                                FROM employees d                                GROUP BY e.department_id)            ORDER BY department_id;BEGIN    f :=UTL_FILE.FOPEN(direct, fname, 'w');    UTL_FILE.PUT_LINE(f, 'EMPLOYEES WHO EARN MORE THAN AVG SALARY:');    UTL_FILE.PUT_LINE(f, 'REPORT GENERATED ON ' || SYSDATE);    UTL_FILE.NEW_LINE(f);    FOR emp IN avg_cur LOOP        UTL_FILE.PUT_LINE(f,        RPAD(emp.last_name, 30) || ' '||        LPAD(NVL(TO_CHAR(emp.department_id, '9999'), '-'),5)||' '||        LPAD(TO_CHAR(emp.salary, '$99,999.00'),12));    END LOOP;    UTL_FILE.NEW_LINE(f);    UTL_FILE.PUT_LINE(f, '*** END OF REPORT ***');    UTL_FILE.FCLOSE(f);END EMPLOYEE_REPORT;/-- b)EXECUTE EMPLOYEE_REPORT('UTL_FILE','sal_rpt01.txt')--TASK 2 a)CREATE OR REPLACE PROCEDURE SCHEDULE_REPORT(    interval VARCHAR2, minutes NUMBER := 10) IS    plsql_block VARCHAR2(200) :=    'BEGIN' ||    ' EMPLOYEE_REPORT(''UTL_FILE'', '||        '''sal_rpt01_''||to_char(sysdate,''HH24-MI-SS'')||''.txt''); '||        'END;';BEGIN    DBMS_SCHEDULER.CREATE_JOB(        job_name => 'EMPSAL_REPORT',        job_type => 'PLSQL_BLOCK',        job_action => plsql_block,        start_date => SYSDATE,        repeat_interval => interval,        end_date => SYSDATE + minutes/(24*60),        enabled => TRUE);END;/SHOW ERRORS-- b)EXECUTE SCHEDULE_REPORT('FREQUENCY = MINUTELY; INTERVAL = 2', 10)